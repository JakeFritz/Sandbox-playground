name: Workflow A

on:
  push:
  pull_request_target:

jobs:
  Job_A_1:
    runs-on: ubuntu-latest
    steps:
      - name: Create one file
        run: |
          echo "Job is named: Job A 1" > workflow_a.txt
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: workflow_a
          path: workflow_a.txt
        
  Job_A_2:
    runs-on: ubuntu-latest
    steps:
      - name: Create another file
        run: |
          echo "Job is named: Job A 2" > workflow_b.txt
      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: workflow_b
          path: workflow_b.txt

  Job_Wait_for_other_workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts from this workflow
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: Set env-var
        id: get_id
        uses: actions/github-script@v7
        with:
          script: |
            const result = await github.request('GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'second_workflow.yml',
              headers: {
                'X-GitHub-Api-Version': '2022-11-28',
                'accept': 'application/vnd.github+json'
              },
              head_sha: context.sha,
            })
            console.log("SHA of commit " + context.sha);
            console.log("Found runs of workflow: " + result.data.total_count);
            if (result.data.total_count == 1) {
              return result.data.workflow_runs[0].id
            } else {
              for (var i = 0; i < result.data.workflow_runs.length; i++) {
                console.log(result.data.workflow_runs[i].id);
              }
              return result.data.workflow_runs[i].id
            }
      - name: Wait for other workflow to finish
        uses: actions/github-script@v7  
        env:
          RUN_ID: ${{ steps.get_id.outputs.result }}
        with:
          script: |
            function get_conclusion(run_id) {
              result = github.request('GET /repos/{owner}/{repo}/actions/runs/{run_id}', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run_id,
                headers: {
                  'X-GitHub-Api-Version': '2022-11-28',
                  'accept': 'application/vnd.github+json'
                },
              }).resolve();
              console.log("Replied status was " + result.conclusion);
              if (result.conclusion!="pending" && result.conclusion!="running") {
              clearInterval(poll_interval)}
            }
            var result;
            var poll_interval = setInterval(get_conclusion(), 10000, env.RUN_ID);
            console.log("Final result is: " + result);
      - name: Test vars
        env:
         Target_Run_ID: ${{ steps.get_id.outputs.result }}
        run: echo "Target run id is $Target_Run_ID"
      - name: Download artifacts from other workflow
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          run-id: ${{ steps.get_id.outputs.result }}
          github-token: ${{ secrets.GH_ACTION_TOKEN }}
      - name: list files
        run: |
          ls -lah
          cat workflow_c.txt
